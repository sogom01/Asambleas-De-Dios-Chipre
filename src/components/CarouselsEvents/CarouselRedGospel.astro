---
const { images } = Astro.props;
---

<style>
  .carousel {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 100%;
    border-radius: 1rem; /* Añadir redondeo al carrusel */
  }

  .carousel-inner {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-item {
    min-width: 100%;
    transition: transform 0.5s ease-in-out;
    border-radius: 1rem; /* Añadir redondeo a los items del carrusel */
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    padding: 0.5rem;
    cursor: pointer;
    z-index: 1;
    border-radius: 50%; /* Hacer las flechas redondeadas */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
  }

  .carousel-button.left {
    left: 0.5rem; /* Ajustar la posición de las flechas */
  }

  .carousel-button.right {
    right: 0.5rem; /* Ajustar la posición de las flechas */
  }

  .carousel-button svg {
    width: 1.5rem; /* Ajustar el tamaño del icono */
    height: 1.5rem; /* Ajustar el tamaño del icono */
  }

  .carousel-indicators {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    display: flex;
    gap: 0.5rem;
    padding: 0 1rem;
    box-sizing: border-box;
    z-index: 1;
  }

  .carousel-indicator {
    flex: 1;
    height: 5px;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 3px;
    overflow: hidden;
    position: relative;
  }

  .carousel-indicator .fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: white;
    transition: width 5s linear;
  }

  .carousel-indicator.active .fill {
    width: 100%;
  }
</style>

<div class="carousel">
  <div class="carousel-inner" id="carousel-inner">
    {
      images.map((image, index) => (
        <div class="carousel-item">
          <img
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover"
          />
        </div>
      ))
    }
  </div>
  <button
    class="carousel-button left"
    id="prevButton"
    aria-label="Previous slide"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  <button class="carousel-button right" id="nextButton" aria-label="Next slide">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
  <div class="carousel-indicators">
    {
      images.map((_, index) => (
        <div class="carousel-indicator" id={`indicator-${index}`}>
          <div class="fill" />
        </div>
      ))
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carouselInner = document.getElementById("carousel-inner");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const indicators = Array.from(
      document.getElementsByClassName("carousel-indicator")
    );
    let currentIndex = 0;
    const totalImages = indicators.length;

    function updateCarousel() {
      const offset = -currentIndex * 100;
      if (carouselInner instanceof HTMLElement) {
        carouselInner.style.transform = `translateX(${offset}%)`;
      }
      indicators.forEach((indicator, index) => {
        const fill = indicator.querySelector(".fill");
        if (fill instanceof HTMLElement) {
          fill.style.width = index === currentIndex ? "100%" : "0%";
        }
      });
    }

    function nextImage() {
      currentIndex = currentIndex < totalImages - 1 ? currentIndex + 1 : 0;
      updateCarousel();
    }

    function prevImage() {
      currentIndex = currentIndex > 0 ? currentIndex - 1 : totalImages - 1;
      updateCarousel();
    }

    prevButton.addEventListener("click", () => {
      clearInterval(slideInterval);
      prevImage();
      slideInterval = setInterval(nextImage, 5000);
    });

    nextButton.addEventListener("click", () => {
      clearInterval(slideInterval);
      nextImage();
      slideInterval = setInterval(nextImage, 5000);
    });

    let slideInterval = setInterval(nextImage, 5000);

    updateCarousel();
  });
</script>
